<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!--1.加载jdbc属性文件-->
    <context:property-placeholder location="classpath:properties/jdbc.properties"/>
    <!--2.配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--基本属性-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="50"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat" />
    </bean>
    <!--3.配置SqlSessionFactoryBean，mybatis与spring的整合，通过spring来创建和管理SqlSession对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定使用别名所在的实体类所在的包-->
        <property name="typeAliasesPackage" value="com.lpl.bean"/>
        <!--自动扫描映射文件-->
        <!--
            如果Mapper.xml与Mapper.class在同一个包下且同名，
                spring扫描Mapper.class的同时会自动扫描同名的Mapper.xml并装配到Mapper.class。
            如果Mapper.xml与Mapper.class不在同一个包下或者不同名，
                就必须使用配置mapperLocations指定mapper.xml的位置。
            此时spring是通过识别mapper.xml中的 <mapper namespace="com.fan.mapper.UserDao">标签
                的namespace的值来确定对应的Mapper.class的。
        -->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>
    <!--
        4.根据SqlSessionFactoryBean对象扫描到的映射文件，并指定接口所在包，
            根据namespace建立对应关系，创建接口的代理对象，并交给spirng容器来管理。
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--3.配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--声明式事务-->
    <!--配置事务的通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--事务的传播行为-->
        <tx:attributes>
            <!--查询方法-->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <!--保存方法-->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <!--更新方法-->
            <tx:method name="update*" propagation="REQUIRED"/>
            <!--删除方法-->
            <tx:method name="delete*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!--配置AOP切面-->
    <aop:config>
        <!--配置切入点表达式-->
        <aop:pointcut id="pe" expression="execution(* com.lpl.service.impl.*.*(..))"/>
        <!--建立通知中的方法与切入点表达式的关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pe"/>
    </aop:config>







</beans>